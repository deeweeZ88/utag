<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Tagging App</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        body {
            display: flex;
            flex-direction: row;
            margin: 0;
            font-family: Arial, sans-serif;
        }
        #map {
            height: 100vh;
            width: 75%;
        }
        #sidebar {
            width: 25%;
            padding: 20px;
            background-color: #f9f9f9;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }
        #formContainer {
            background-color: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        #tagForm label,
        #tagForm select,
        #tagForm input {
            width: 100%;
            margin-bottom: 10px;
        }
        button {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <div id="formContainer">
            <form id="tagForm">
                <label for="status">Select Status:</label><br />
                <select id="status" name="status">
                    <option value="power_out">Power Out</option>
                    <option value="power_back_on">Power Back On</option>
                    <option value="robbed">Robbed</option>
                    <option value="garage_sale">Garage Sale</option>
                </select>
                <br /><br />
                <label for="datetime">Date and Time:</label><br />
                <input type="datetime-local" id="datetime" name="datetime" />
                <br /><br />
                <label for="address">Enter Address (Optional):</label><br />
                <input type="text" id="address" name="address" placeholder="Enter address" />
                <br /><br />
                <button type="submit">Submit</button>
            </form>
        </div>
    </div>

    <div id="map"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        // Initialize the map
        var map = L.map('map').fitWorld();
        var userMarker;
        var tagMarkers = []; // Store all markers

        // Set up the OpenStreetMap layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
        }).addTo(map);

        // Color map for different statuses
        var statusColors = {
            'power_out': 'red',
            'power_back_on': 'green',
            'robbed': 'black',
            'garage_sale': 'blue'
        };

        // Initialize geocoder
        var geocoder = L.Control.Geocoder.nominatim();

        // Handle location found
        function onLocationFound(e) {
            var latlng = e.latlng;

            // Add a marker at the user's location if not already added
            if (!userMarker) {
                userMarker = L.marker(latlng).addTo(map);
            } else {
                userMarker.setLatLng(latlng);
            }

            // Bind a popup with a form
            userMarker.bindPopup(
                `<b>Your Location</b><br>
                 <button onclick="openForm()">Add Tag</button>`
            ).openPopup();

            // Center the map on the user's location
            map.setView(latlng, 16);
        }

        // Handle location error
        function onLocationError(e) {
            alert(e.message);
        }

        // Locate the user
        map.on('locationfound', onLocationFound);
        map.on('locationerror', onLocationError);

        map.locate({ setView: true, maxZoom: 16 });

        // Open the form
        function openForm() {
            document.getElementById('formContainer').scrollIntoView({ behavior: 'smooth' });
        }

        // Handle form submission
        document.getElementById('tagForm').addEventListener('submit', function (e) {
            e.preventDefault();

            var status = document.getElementById('status').value;
            var datetime = document.getElementById('datetime').value;
            var addressInput = document.getElementById('address').value;

            if (addressInput) {
                // Use the provided address to get coordinates
                geocoder.geocode(addressInput, function(results) {
                    if (results.length > 0) {
                        var latlng = results[0].center;
                        addMarker(latlng, status, datetime, results[0].name);
                    } else {
                        alert('Address not found. Please try again.');
                    }
                });
            } else {
                // Use user's current location
                var latlng = userMarker.getLatLng();
                geocoder.reverse(latlng, map.options.crs.scale(map.getZoom()), function(results) {
                    var address = results[0] ? results[0].name : 'Address not found';
                    addMarker(latlng, status, datetime, address);
                });
            }
        });

        // Function to add marker
        function addMarker(latlng, status, datetime, address) {
            var newMarker = L.circleMarker(latlng, {
                color: statusColors[status],
                radius: 8
            }).addTo(map)
            .bindPopup(
                `<b>Status:</b> ${status}<br><b>Date and Time:</b> ${datetime}<br><b>Address:</b> ${address}`
            );

            tagMarkers.push(newMarker); // Store the marker for later use

            alert('Tag Submitted!');
        }

        // Sample data
        var sampleTags = [
            {
                latlng: [51.505, -0.09],
                status: 'power_out',
                datetime: '2024-10-15T09:00',
            },
            {
                latlng: [51.51, -0.1],
                status: 'garage_sale',
                datetime: '2024-10-16T14:00',
            },
        ];

        // Function to display sample tags
        function displaySampleTags() {
            sampleTags.forEach(function (tag) {
                geocoder.reverse(tag.latlng, map.options.crs.scale(map.getZoom()), function(results) {
                    var address = results[0] ? results[0].name : 'Address not found';
                    var marker = L.circleMarker(tag.latlng, {
                        color: statusColors[tag.status],
                        radius: 8
                    }).addTo(map)
                    .bindPopup(
                        `<b>Status:</b> ${tag.status}<br><b>Date and Time:</b> ${tag.datetime}<br><b>Address:</b> ${address}`
                    );

                    tagMarkers.push(marker); // Store the marker for later use
                });
            });
        }

        // Call the function
        displaySampleTags();
    </script>
</body>
</html>
